'use client';

import { useEffect, useState } from 'react';

export default function SuccessPage() {
  const [message, setMessage] = useState('–û–±—Ä–æ–±–ª—è—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è...');

  useEffect(() => {
    const savedOrder = localStorage.getItem('pendingOrder');

    if (!savedOrder) {
      setMessage('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
      return;
    }

    const order = JSON.parse(savedOrder);

    const sendOrder = async () => {
      try {
        const res = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL}/api/orders`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(order),
        });

        if (!res.ok) throw new Error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');

        // ‚¨áÔ∏è –û—á–∏—â–∞—î–º–æ –≤—Å–µ, —â–æ –∑–±–µ—Ä—ñ–≥–∞–ª–æ—Å—å –ø—ñ–¥ —á–∞—Å –ø–æ–∫—É–ø–∫–∏
        localStorage.removeItem('pendingOrder');
        localStorage.removeItem('cart');
        localStorage.removeItem('totalAmount');
        localStorage.removeItem('sessionId');

        setMessage('‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ! –û—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–∫–∞ üìû');
      } catch (err) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', err);
        setMessage('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –ó–≤ º—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏!');
      }
    };

    sendOrder();
  }, []);

  return (
    <div className="min-h-screen flex items-center justify-center text-center p-6">
      <div className="text-xl font-semibold">{message}</div>
    </div>
  );
}
{/*'use client';

import { useEffect, useState } from 'react';

export default function SuccessPage() {
  const [message, setMessage] = useState('–û–±—Ä–æ–±–ª—è—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è...');

  useEffect(() => {
    const savedOrder = localStorage.getItem('pendingOrder');

    if (!savedOrder) {
      setMessage('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
      return;
    }
    const order = JSON.parse(savedOrder);
    const sendOrder = async () => {
      try {
        const res = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL}/api/orders`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(order),

        });

        if (!res.ok) throw new Error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');

        localStorage.removeItem('pendingOrder');
        setMessage('‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ! –û—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–∫–∞ üìû');
      } catch (err) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', err);
        setMessage('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –ó–≤ º—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏!');
      }
    };

    sendOrder();
  }, []);

  return (
    <div className="min-h-screen flex items-center justify-center text-center p-6">
      <div className="text-xl font-semibold">{message}</div>
    </div>
  );
}
*/}